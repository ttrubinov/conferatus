#include <math.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>

typedef struct point {
    float x, y;
} Point;

typedef struct circle {
    Point o;
    float rad;
} Circle;

typedef struct line {
    float a, b, c;
} Line;

float distance(Point a, Point b) {
    return sqrt((b.x - a.x) * (b.x - a.x) + (b.y - a.y)* (b.y - a.y));
}

int equal(float a, float b) {
    float diff = a - b;
    float epsilon = 0.001;
    return (diff < epsilon && (-diff < epsilon));
}

int equalE(float a, float b, float epsilon) {
    float diff = a - b;
    return (diff < epsilon && (-diff < epsilon));
}

float getValue(Point a, Point b) {
    float k = 10000 + (float)rand() / RAND_MAX * 300;
    return k / (distance(a, b) * distance(a, b)) + (float)rand() / RAND_MAX * 0.3;
}

Circle calcCircle(Point s0, Point s1, float k) {
    float x1 = s1.x - s0.x;
    float y1 = s1.y - s0.y;
    float xk1 = x1 / (k * k - 1);
    float yk1 = y1 / (k * k - 1);
    Circle circle;
    circle.o.x = -xk1 + s0.x;
    circle.o.y = -yk1 + s0.y;
    circle.rad = xk1 * xk1 + xk1 * x1 + yk1 * yk1 + yk1 * y1;
    return circle;
}

Point circleIntersection(Circle c1, Circle c2) {

}

int pointOnLine(Point p, Line l) {
    equalE(l.a * (p.x) + l.b * (p.y) + l.c, 0, (l.a + l.b) / 2 + 1);
}

int pointOnCircle(Point p, Circle c) {
    equalE((p.x - c.o.x) * (p.x - c.o.x) + (p.y - c.o.y) * (p.y - c.o.y) - c.rad, 0, sqrt(c.rad));
}

Line midperpendicular(Point a, Point b) {
    float x = -a.x + b.x, y = -a.y + b.y;
    return (Line) {2 * x, 2 * y, -(2 * x * a.x + 2 * y * a.y) - x * x - y * y};
}

Point triangulation(Point a, Point b, Point c, float sa, float sb, float sc) {
    float k1 = sqrt(sa / sb);
    if(equalE(k1, 1, 0.1)) {
        Line line = midperpendicular(a, b);
    }
    Circle c1 = calcCircle(a, b, k1);
    float k2 = sqrt(sa / sb);
    if(equalE(k2, 1, 0.1)) {
        Line line = midperpendicular(b, c);
    }
    Circle c2 = calcCircle(b, c, k2);
    return (Point) circleIntersection(c1, c2);
}

int main() {
    srand(time(NULL));
    Point mic1 = {5, 5};
    Point mic2 = {6, 4};
    Point mic3 = {7, 4};
    Point mic4 = {8, 5};
    Point source; source.x = 15; source.y = 45;
    float avg1 = 0, avg2 = 0, avg3 = 0, avg4 = 0;
    int n = 20;
    for(int i = 0; i < n; i++) {
        avg1 += getValue(source, mic1);
        avg2 += getValue(source, mic2);
        avg3 += getValue(source, mic3);
        avg4 += getValue(source, mic4);
    }
    avg1 /= n;
    avg2 /= n;
    avg3 /= n;
    avg4 /= n;
    float mic1Sound = avg1, mic2Sound = avg2, mic3Sound = avg3, mic4Sound = avg4;
    //float mic1Sound = getValue(source, mic1), mic2Sound = getValue(source, mic2), mic3Sound = getValue(source, mic3), mic4Sound = getValue(source, mic4);
    Line line = midperpendicular(mic1, mic2);
    Circle circ1 = calcCircle(mic1, mic2, sqrt(mic1Sound / mic2Sound));
    Circle circ2 = calcCircle(mic2, mic3, sqrt(mic2Sound / mic3Sound));
    Circle circ3 = calcCircle(mic3, mic4, sqrt(mic3Sound / mic4Sound));
    for(float j1 = 100; j1 >= 0; j1--) {
        float j = j1 / 2;
        for(float i = 0; i <= 50; i++) {
            char str[5] = {' ', '.', ' ', ' ', 0};
            if(equal(i, source.x) && equal(j, source.y)) {
                str[0] = 'S';
            }
            if(equal(i, mic1.x) && equal(j, mic1.y)) {
                str[1] = '1';
            }
            if(equal(i, mic2.x) && equal(j, mic2.y)) {
                str[1] = '2';
            }
            if(equal(i, mic3.x) && equal(j, mic3.y)) {
                str[1] = '3';
            }
            if(equal(i, mic4.x) && equal(j, mic4.y)) {
                str[1] = '4';
            }
            if(pointOnCircle((Point) {i, j}, circ1)) {
                str[3] = 'o';
            }
            if(pointOnCircle((Point) {i, j}, circ2)) {
                str[2] = 'O';
            }
            if(pointOnCircle((Point) {i, j}, circ3)) {
                str[2] = '0';
            }
            printf("%s", str);
        }
        printf("\n");
    }
    printf("\n");
    printf("%f %f %f\n", 11.0, 30.0, 40.0);
    printf("%f %f %f %f", mic1Sound, mic2Sound, mic3Sound, mic4Sound);
}
